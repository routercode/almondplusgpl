Index: dnsmasq-2.55/src/rfc2131.c
===================================================================
--- dnsmasq-2.55.orig/src/rfc2131.c	2011-08-23 14:21:24.000000000 +0800
+++ dnsmasq-2.55/src/rfc2131.c	2011-08-23 14:26:27.000000000 +0800
@@ -146,7 +146,7 @@
   char *message = NULL;
   unsigned int time;
   struct dhcp_config *config;
-  struct dhcp_netid *netid, *tagif_netid;
+  struct dhcp_netid *netid, *tagif_netid, *pc_netid = NULL;
   struct in_addr subnet_addr, fallback, override;
   unsigned short fuzz = 0;
   unsigned int mess_type = 0;
@@ -158,6 +158,7 @@
   struct dhcp_opt *o;
   unsigned char pxe_uuid[17];
   unsigned char *oui = NULL, *serial = NULL, *class = NULL;
+  int vendor_match = 0;
 
   subnet_addr.s_addr = override.s_addr = 0;
 
@@ -723,28 +724,38 @@
 	  }
     }
     
-  for (vendor = daemon->dhcp_vendors; vendor; vendor = vendor->next)
-    {
-      int mopt;
-      
-      if (vendor->match_type == MATCH_VENDOR)
-	mopt = OPTION_VENDOR_ID;
-      else if (vendor->match_type == MATCH_USER)
-	mopt = OPTION_USER_CLASS; 
-      else
-	continue;
+    for (vendor = daemon->dhcp_vendors; vendor; vendor = vendor->next) {
+        int mopt;
 
-      if ((opt = option_find(mess, sz, mopt, 1)))
-	{
-	  int i;
-	  for (i = 0; i <= (option_len(opt) - vendor->len); i++)
-	    if (memcmp(vendor->data, option_ptr(opt, i), vendor->len) == 0)
-	      {
-		vendor->netid.next = netid;
-		netid = &vendor->netid;
-		break;
-	      }
-	}
+        if (vendor->match_type == MATCH_VENDOR) {
+            mopt = OPTION_VENDOR_ID;
+            /*缺省类型为Computer类型，目前暂时把厂商编码当做设备类型，后续针对电信e8标准还需修改*/
+            if ((vendor_match == 0) && (memcmp(vendor->data,"Computer",vendor->len) == 0)) {
+                pc_netid = &vendor->netid;
+            }
+        } else if (vendor->match_type == MATCH_USER) {
+            mopt = OPTION_USER_CLASS;
+        } else {
+            continue;
+        }
+
+        if ((opt = option_find(mess, sz, mopt, 1))) {
+            int i;
+            for (i = 0; i <= (option_len(opt) - vendor->len); i++) {
+                if (memcmp(vendor->data, option_ptr(opt, i), vendor->len) == 0) {
+                    vendor->netid.next = netid;
+                    netid = &vendor->netid;
+                    vendor_match = 1;
+                    break;
+                }
+            }
+        }
+    }
+
+    /*如果未找到设备类型，则缺省为Computer*/
+    if ((vendor_match == 0) && (pc_netid != NULL)) {
+        pc_netid->next = netid;
+        netid = pc_netid;
     }
 
   /* mark vendor-encapsulated options which match the client-supplied vendor class,
