--- old/net/netfilter/nf_conntrack_rtsp.c	2011-07-20 17:51:28.000000000 +0800
+++ new/net/netfilter/nf_conntrack_rtsp.c	2011-07-19 11:20:51.000000000 +0800
@@ -49,12 +49,6 @@
 
 #include <linux/ctype.h>
 #define MAX_SIMUL_SETUP 8 /* XXX: use max_outstanding */
-#define INFOP(fmt, args...) printk(KERN_INFO "%s: %s: " fmt, __FILE__, __FUNCTION__ , ## args)
-#if 0
-#define DEBUGP(fmt, args...) printk(KERN_DEBUG "%s: %s: " fmt, __FILE__, __FUNCTION__ , ## args)
-#else
-#define DEBUGP(fmt, args...)
-#endif
 
 #define MAX_PORTS 8
 static int ports[MAX_PORTS];
@@ -75,10 +69,12 @@
 static char *rtsp_buffer;
 static DEFINE_SPINLOCK(rtsp_buffer_lock);
 
+static struct nf_conntrack_expect_policy rtsp_exp_policy; 
+
 unsigned int (*nf_nat_rtsp_hook)(struct sk_buff *skb,
 				 enum ip_conntrack_info ctinfo,
 				 unsigned int matchoff, unsigned int matchlen,struct ip_ct_rtsp_expect* prtspexp,
-				 struct nf_conntrack_expect *exp);
+				 struct nf_conntrack_expect *exp, struct nf_conntrack_expect *exp2);
 void (*nf_nat_rtsp_hook_expectfn)(struct nf_conn *ct, struct nf_conntrack_expect *exp);
 
 EXPORT_SYMBOL_GPL(nf_nat_rtsp_hook);
@@ -118,10 +114,10 @@
 	uint    entitylen = 0;
 	uint    lineoff;
 	uint    linelen;
-
+	
 	if (!nf_nextline(ptcp, tcplen, ptcpoff, &lineoff, &linelen))
 		return 0;
-
+	
 	*phdrsoff = *ptcpoff;
 	while (nf_mime_nextline(ptcp, tcplen, ptcpoff, &lineoff, &linelen)) {
 		if (linelen == 0) {
@@ -130,20 +126,20 @@
 			break;
 		}
 		if (lineoff+linelen > tcplen) {
-			INFOP("!! overrun !!\n");
+			pr_info("!! overrun !!\n");
 			break;
 		}
-
+		
 		if (nf_strncasecmp(ptcp+lineoff, "CSeq:", 5) == 0) {
 			*pcseqoff = lineoff;
 			*pcseqlen = linelen;
-		}
+		} 
 
 		if (nf_strncasecmp(ptcp+lineoff, "Transport:", 10) == 0) {
 			*transoff = lineoff;
 			*translen = linelen;
 		}
-
+		
 		if (nf_strncasecmp(ptcp+lineoff, "Content-Length:", 15) == 0) {
 			uint off = lineoff+15;
 			SKIP_WSPACE(ptcp+lineoff, linelen, off);
@@ -151,7 +147,7 @@
 		}
 	}
 	*phdrslen = (*ptcpoff) - (*phdrsoff);
-
+	
 	return 1;
 }
 
@@ -175,44 +171,44 @@
 {
 	int     rc = 0;
 	uint    off = 0;
-
+	
 	if (tranlen < 10 || !iseol(ptran[tranlen-1]) ||
 	    nf_strncasecmp(ptran, "Transport:", 10) != 0) {
-		INFOP("sanity check failed\n");
+		pr_info("sanity check failed\n");
 		return 0;
 	}
-
-	DEBUGP("tran='%.*s'\n", (int)tranlen, ptran);
+	
+	pr_debug("tran='%.*s'\n", (int)tranlen, ptran);
 	off += 10;
 	SKIP_WSPACE(ptran, tranlen, off);
-
+	
 	/* Transport: tran;field;field=val,tran;field;field=val,... */
 	while (off < tranlen) {
 		const char* pparamend;
 		uint        nextparamoff;
-
+		
 		pparamend = memchr(ptran+off, ',', tranlen-off);
 		pparamend = (pparamend == NULL) ? ptran+tranlen : pparamend+1;
 		nextparamoff = pparamend-ptran;
-
+		
 		while (off < nextparamoff) {
 			const char* pfieldend;
 			uint        nextfieldoff;
-
+			
 			pfieldend = memchr(ptran+off, ';', nextparamoff-off);
 			nextfieldoff = (pfieldend == NULL) ? nextparamoff : pfieldend-ptran+1;
-
+		   
 			if (strncmp(ptran+off, "client_port=", 12) == 0) {
 				u_int16_t   port;
 				uint        numlen;
-
+		    
 				off += 12;
 				numlen = nf_strtou16(ptran+off, &port);
 				off += numlen;
 				if (prtspexp->loport != 0 && prtspexp->loport != port)
-					DEBUGP("multiple ports found, port %hu ignored\n", port);
+					pr_debug("multiple ports found, port %hu ignored\n", port);
 				else {
-					DEBUGP("lo port found : %hu\n", port);
+					pr_debug("lo port found : %hu\n", port);
 					prtspexp->loport = prtspexp->hiport = port;
 					if (ptran[off] == '-') {
 						off++;
@@ -220,12 +216,12 @@
 						off += numlen;
 						prtspexp->pbtype = pb_range;
 						prtspexp->hiport = port;
-
+						
 						// If we have a range, assume rtp:
 						// loport must be even, hiport must be loport+1
 						if ((prtspexp->loport & 0x0001) != 0 ||
 						    prtspexp->hiport != prtspexp->loport+1) {
-							DEBUGP("incorrect range: %hu-%hu, correcting\n",
+							pr_debug("incorrect range: %hu-%hu, correcting\n",
 							       prtspexp->loport, prtspexp->hiport);
 							prtspexp->loport &= 0xfffe;
 							prtspexp->hiport = prtspexp->loport+1;
@@ -240,27 +236,29 @@
 					rc = 1;
 				}
 			}
-
+			
 			/*
 			 * Note we don't look for the destination parameter here.
 			 * If we are using NAT, the NAT module will handle it.  If not,
 			 * and the client is sending packets elsewhere, the expectation
 			 * will quietly time out.
 			 */
-
+			
 			off = nextfieldoff;
 		}
-
+		
 		off = nextparamoff;
 	}
-
+	
 	return rc;
 }
 
 void expected(struct nf_conn *ct, struct nf_conntrack_expect *exp)
 {
-    if(nf_nat_rtsp_hook_expectfn) {
-        nf_nat_rtsp_hook_expectfn(ct,exp);
+		typeof(nf_nat_rtsp_hook_expectfn) nf_nat_rtsp_expectfn;
+		nf_nat_rtsp_expectfn = rcu_dereference(nf_nat_rtsp_hook_expectfn);
+    if(nf_nat_rtsp_expectfn && ct->master->status & IPS_NAT_MASK) {
+        nf_nat_rtsp_expectfn(ct,exp);
     }
 }
 
@@ -273,7 +271,7 @@
                 struct nf_conn *ct, enum ip_conntrack_info ctinfo)
 {
 	struct ip_ct_rtsp_expect expinfo;
-
+	
 	int dir = CTINFO2DIR(ctinfo);   /* = IP_CT_DIR_ORIGINAL */
 	//struct  tcphdr* tcph = (void*)iph + iph->ihl * 4;
 	//uint    tcplen = pktlen - iph->ihl * 4;
@@ -281,13 +279,15 @@
 	//uint    datalen = tcplen - tcph->doff * 4;
 	uint    dataoff = 0;
 	int ret = NF_ACCEPT;
-
-	struct nf_conntrack_expect *exp;
-
-	__be16 be_loport;
+	
+	struct nf_conntrack_expect *exp, *exp2=NULL;
+	
+	__be16 be_loport, be_hiport;
+	
+	typeof(nf_nat_rtsp_hook) nf_nat_rtsp;
 
 	memset(&expinfo, 0, sizeof(expinfo));
-
+	
 	while (dataoff < datalen) {
 		uint    cmdoff = dataoff;
 		uint    hdrsoff = 0;
@@ -297,16 +297,16 @@
 		uint    transoff = 0;
 		uint    translen = 0;
 		uint    off;
-
+		
 		if (!rtsp_parse_message(pdata, datalen, &dataoff,
 					&hdrsoff, &hdrslen,
 					&cseqoff, &cseqlen,
 					&transoff, &translen))
 			break;      /* not a valid message */
-
+		
 		if (strncmp(pdata+cmdoff, "SETUP ", 6) != 0)
 			continue;   /* not a SETUP message */
-		DEBUGP("found a setup message\n");
+		pr_debug("found a setup message\n");
 
 		off = 0;
 		if(translen) {
@@ -314,11 +314,11 @@
 		}
 
 		if (expinfo.loport == 0) {
-			DEBUGP("no udp transports found\n");
+			pr_debug("no udp transports found\n");
 			continue;   /* no udp transports found */
 		}
 
-		DEBUGP("udp transport found, ports=(%d,%hu,%hu)\n",
+		pr_debug("udp transport found, ports=(%d,%hu,%hu)\n",
 		       (int)expinfo.pbtype, expinfo.loport, expinfo.hiport);
 
 		exp = nf_ct_expect_alloc(ct);
@@ -326,38 +326,80 @@
 			ret = NF_DROP;
 			goto out;
 		}
+		
+		/* alloc the second expection for the high port. */
+		if (expinfo.pbtype != pb_single)
+		{
+			exp2 = nf_ct_expect_alloc(ct);
+			if (!exp2) {
+				ret = NF_DROP;
+				goto out2;
+			}
+		}					
 
 		be_loport = htons(expinfo.loport);
 
-		nf_ct_expect_init(exp, NF_CT_EXPECT_CLASS_DEFAULT,
-			ct->tuplehash[!dir].tuple.src.l3num,
+		nf_ct_expect_init(exp, NF_CT_EXPECT_CLASS_DEFAULT, nf_ct_l3num(ct),
 			&ct->tuplehash[!dir].tuple.src.u3, &ct->tuplehash[!dir].tuple.dst.u3,
-			IPPROTO_UDP, NULL, &be_loport);
+			IPPROTO_UDP, NULL, &be_loport); 
 
 		exp->master = ct;
 
 		exp->expectfn = expected;
 		exp->flags = 0;
 
-		if (expinfo.pbtype == pb_range) {
-			DEBUGP("Changing expectation mask to handle multiple ports\n");
-			exp->mask.src.u.udp.port  = 0xfffe;
-		}
-
-		DEBUGP("expect_related %u.%u.%u.%u:%u-%u.%u.%u.%u:%u\n",
-		       NIPQUAD(exp->tuple.src.u3.ip),
+		pr_debug("expect_related %pI4:%u-%pI4:%u\n",
+		       &exp->tuple.src.u3.ip,
 		       ntohs(exp->tuple.src.u.udp.port),
-		       NIPQUAD(exp->tuple.dst.u3.ip),
+		       &exp->tuple.dst.u3.ip,
 		       ntohs(exp->tuple.dst.u.udp.port));
 
-		if (nf_nat_rtsp_hook)
+		/* init the second expection for the high port. */
+		if (expinfo.pbtype != pb_single) {
+			pr_debug("Init the second expection for the high port\n");
+			
+			be_hiport = htons(expinfo.hiport);
+			
+			nf_ct_expect_init(exp2, NF_CT_EXPECT_CLASS_DEFAULT, nf_ct_l3num(ct),
+				&ct->tuplehash[!dir].tuple.src.u3, &ct->tuplehash[!dir].tuple.dst.u3,
+				IPPROTO_UDP, NULL, &be_hiport); 
+			
+			exp2->master = ct;
+			
+			exp2->expectfn = expected;
+			exp2->flags = 0;		
+			
+			pr_debug("expect_related %pI4:%u-%pI4:%u for the second connection\n",
+				   &exp2->tuple.src.u3.ip,
+				   ntohs(exp2->tuple.src.u.udp.port),
+				   &exp2->tuple.dst.u3.ip,
+				   ntohs(exp2->tuple.dst.u.udp.port));
+		}
+
+		nf_nat_rtsp = rcu_dereference(nf_nat_rtsp_hook);
+		if (nf_nat_rtsp && ct->status & IPS_NAT_MASK)
 			/* pass the request off to the nat helper */
-			ret = nf_nat_rtsp_hook(skb, ctinfo, hdrsoff, hdrslen, &expinfo, exp);
-		else if (nf_ct_expect_related(exp) != 0) {
-			INFOP("nf_ct_expect_related failed\n");
-			ret  = NF_DROP;
+			ret = nf_nat_rtsp(skb, ctinfo, hdrsoff, hdrslen, &expinfo, exp, exp2);
+		else {
+			if (nf_ct_expect_related(exp) != 0) {
+				pr_info("nf_conntrack_expect_related failed\n");
+				ret  = NF_DROP;
+				goto out2;
+			}
+			/* the second expection for the high port */
+			if (expinfo.pbtype != pb_single) {
+				if (nf_ct_expect_related(exp2) != 0)
+				{
+					pr_info("nf_conntrack_expect_related exp2 failed\n");
+					nf_ct_unexpect_related(exp);
+					ret  = NF_DROP;
+				}
+			}
 		}
-		nf_ct_expect_put(exp);
+out2:
+                if(exp2)
+                        nf_ct_expect_put(exp2);
+		nf_ct_expect_put(exp);	
 		goto out;
 	}
 out:
@@ -374,7 +416,7 @@
 }
 
 static int help(struct sk_buff *skb, unsigned int protoff,
-		struct nf_conn *ct, enum ip_conntrack_info ctinfo)
+		struct nf_conn *ct, enum ip_conntrack_info ctinfo) 
 {
 	struct tcphdr _tcph, *th;
 	unsigned int dataoff, datalen;
@@ -382,18 +424,18 @@
 	int ret = NF_DROP;
 
 	/* Until there's been traffic both ways, don't look in packets. */
-	if (ctinfo != IP_CT_ESTABLISHED &&
+	if (ctinfo != IP_CT_ESTABLISHED && 
 	    ctinfo != IP_CT_ESTABLISHED + IP_CT_IS_REPLY) {
-		DEBUGP("conntrackinfo = %u\n", ctinfo);
+		pr_debug("conntrackinfo = %u\n", ctinfo);
 		return NF_ACCEPT;
-	}
+	} 
 
 	/* Not whole TCP header? */
-	th = skb_header_pointer(skb, protoff, sizeof(_tcph), &_tcph);
+	th = skb_header_pointer(skb,protoff, sizeof(_tcph), &_tcph);
 
 	if (!th)
 		return NF_ACCEPT;
-
+   
 	/* No data ? */
 	dataoff = protoff + th->doff*4;
 	datalen = skb->len - dataoff;
@@ -422,7 +464,7 @@
 		ret = help_out(skb, rb_ptr, datalen, ct, ctinfo);
 		break;
 	case IP_CT_DIR_REPLY:
-		DEBUGP("IP_CT_DIR_REPLY\n");
+		pr_debug("IP_CT_DIR_REPLY\n");
 		/* inbound packet: server->client */
 		ret = NF_ACCEPT;
 		break;
@@ -435,7 +477,6 @@
 
 static struct nf_conntrack_helper rtsp_helpers[MAX_PORTS];
 static char rtsp_names[MAX_PORTS][10];
-static struct nf_conntrack_expect_policy rtsp_expect_policy;
 
 /* This function is intentionally _NOT_ defined as __exit */
 static void
@@ -443,7 +484,7 @@
 {
 	int i;
 	for (i = 0; i < num_ports; i++) {
-		DEBUGP("unregistering port %d\n", ports[i]);
+		pr_debug("unregistering port %d\n", ports[i]);
 		nf_conntrack_helper_unregister(&rtsp_helpers[i]);
 	}
 	kfree(rtsp_buffer);
@@ -467,11 +508,11 @@
 		return -EBUSY;
 	}
 
-	rtsp_expect_policy.max_expected = max_outstanding;
-	rtsp_expect_policy.timeout = setup_timeout;
-
+  rtsp_exp_policy.max_expected = max_outstanding;
+  rtsp_exp_policy.timeout = setup_timeout;
+	
 	rtsp_buffer = kmalloc(65536, GFP_KERNEL);
-	if (!rtsp_buffer)
+	if (!rtsp_buffer) 
 		return -ENOMEM;
 
 	/* If no port given, default to standard rtsp port */
@@ -482,9 +523,12 @@
 	for (i = 0; (i < MAX_PORTS) && ports[i]; i++) {
 		hlpr = &rtsp_helpers[i];
 		memset(hlpr, 0, sizeof(struct nf_conntrack_helper));
+		hlpr->tuple.src.l3num = AF_INET;
 		hlpr->tuple.src.u.tcp.port = htons(ports[i]);
 		hlpr->tuple.dst.protonum = IPPROTO_TCP;
-		hlpr->expect_policy = &rtsp_expect_policy;
+		//hlpr->mask.src.u.tcp.port = 0xFFFF;
+		//hlpr->mask.dst.protonum = 0xFF;
+		hlpr->expect_policy = &rtsp_exp_policy;
 		hlpr->me = THIS_MODULE;
 		hlpr->help = help;
 
@@ -496,7 +540,7 @@
 		}
 		hlpr->name = tmpname;
 
-		DEBUGP("port #%d: %d\n", i, ports[i]);
+		pr_debug("port #%d: %d\n", i, ports[i]);
 
 		ret = nf_conntrack_helper_register(hlpr);
 
--- old/net/ipv4/netfilter/nf_nat_rtsp.c	2011-07-20 18:19:20.000000000 +0800
+++ new/net/ipv4/netfilter/nf_nat_rtsp.c	2011-07-19 11:26:17.000000000 +0800
@@ -45,13 +45,6 @@
 #define NF_NEED_MIME_NEXTLINE
 #include <linux/netfilter_mime.h>
 
-#define INFOP(fmt, args...) printk(KERN_INFO "%s: %s: " fmt, __FILE__, __FUNCTION__ , ## args)
-#if 0
-#define DEBUGP(fmt, args...) printk(KERN_DEBUG "%s: %s: " fmt, __FILE__, __FUNCTION__ , ## args)
-#else
-#define DEBUGP(fmt, args...)
-#endif
-
 #define MAX_PORTS       8
 #define DSTACT_AUTO     0
 #define DSTACT_STRIP    1
@@ -107,6 +100,7 @@
 static int
 rtsp_mangle_tran(enum ip_conntrack_info ctinfo,
                  struct nf_conntrack_expect* exp,
+                 struct nf_conntrack_expect* exp2,
 								 struct ip_ct_rtsp_expect* prtspexp,
                  struct sk_buff* skb, uint tranoff, uint tranlen)
 {
@@ -123,7 +117,7 @@
     uint        diff;           /* Number of bytes we removed */
 
     struct nf_conn *ct = exp->master;
-    struct nf_conntrack_tuple *t;
+    struct nf_conntrack_tuple *t, *t2;
 
     char    szextaddr[15+1];
     uint    extaddrlen;
@@ -136,7 +130,7 @@
         tranlen < 10 || !iseol(ptran[tranlen-1]) ||
         nf_strncasecmp(ptran, "Transport:", 10) != 0)
     {
-        INFOP("sanity check failed\n");
+        pr_info("sanity check failed\n");
         return 0;
     }
     off += 10;
@@ -146,9 +140,9 @@
     t = &exp->tuple;
     t->dst.u3.ip = newip;
 
-    extaddrlen = extip ? sprintf(szextaddr, "%u.%u.%u.%u", &extip)
-                       : sprintf(szextaddr, "%u.%u.%u.%u", &newip);
-    DEBUGP("stunaddr=%s (%s)\n", szextaddr, (extip?"forced":"auto"));
+    extaddrlen = extip ? sprintf(szextaddr, "%pI4", &extip)
+                       : sprintf(szextaddr, "%pI4", &newip);
+    pr_debug("stunaddr=%s (%s)\n", szextaddr, (extip?"forced":"auto"));
 
     rbuf1len = rbufalen = 0;
     switch (prtspexp->pbtype)
@@ -159,7 +153,7 @@
             t->dst.u.udp.port = htons(loport);
             if (nf_ct_expect_related(exp) == 0)
             {
-                DEBUGP("using port %hu\n", loport);
+                pr_debug("using port %hu\n", loport);
                 break;
             }
         }
@@ -169,15 +163,21 @@
             rbufalen = sprintf(rbufa, "%hu", loport);
         }
         break;
-    case pb_range:
+    case pb_range:		
+	t2 = &exp2->tuple;
         for (loport = prtspexp->loport; loport != 0; loport += 2) /* XXX: improper wrap? */
         {
             t->dst.u.udp.port = htons(loport);
             if (nf_ct_expect_related(exp) == 0)
             {
-                hiport = loport + ~exp->mask.src.u.udp.port;
-                DEBUGP("using ports %hu-%hu\n", loport, hiport);
-                break;
+                hiport = loport + 1; //~exp->mask.dst.u.udp.port;
+                t2->dst.u.udp.port = htons(hiport);
+		if (nf_ct_expect_related(exp2) == 0)
+		{			
+	            pr_debug("using ports %hu-%hu\n", loport, hiport); 
+	            break;
+		}
+		nf_ct_unexpect_related(exp);
             }
         }
         if (loport != 0)
@@ -192,16 +192,16 @@
             t->dst.u.udp.port = htons(loport);
             if (nf_ct_expect_related(exp) == 0)
             {
-                DEBUGP("using port %hu (1 of 2)\n", loport);
+                pr_debug("using port %hu (1 of 2)\n", loport);
                 break;
             }
         }
         for (hiport = prtspexp->hiport; hiport != 0; hiport++) /* XXX: improper wrap? */
         {
-            t->dst.u.udp.port = htons(hiport);
-            if (nf_ct_expect_related(exp) == 0)
+            t2->dst.u.udp.port = htons(hiport);
+            if (nf_ct_expect_related(exp2) == 0)
             {
-                DEBUGP("using port %hu (2 of 2)\n", hiport);
+                pr_debug("using port %hu (2 of 2)\n", hiport);
                 break;
             }
         }
@@ -266,6 +266,8 @@
                     {
                         /* mangle failed, all we can do is bail */
 			nf_ct_unexpect_related(exp);
+			if (exp2)
+				nf_ct_unexpect_related(exp2);
                         return 0;
                     }
                     get_skb_tcpdata(skb, &ptcp, &tcplen);
@@ -308,7 +310,7 @@
                 origlen += numlen;
                 if (port != prtspexp->loport)
                 {
-                    DEBUGP("multiple ports found, port %hu ignored\n", port);
+                    pr_debug("multiple ports found, port %hu ignored\n", port);
                 }
                 else
                 {
@@ -336,6 +338,8 @@
                     {
                         /* mangle failed, all we can do is bail */
 			nf_ct_unexpect_related(exp);
+			if (exp2)
+				nf_ct_unexpect_related(exp2);
                         return 0;
                     }
                     get_skb_tcpdata(skb, &ptcp, &tcplen);
@@ -357,8 +361,8 @@
 
 static uint
 help_out(struct sk_buff *skb, enum ip_conntrack_info ctinfo,
-	 unsigned int matchoff, unsigned int matchlen, struct ip_ct_rtsp_expect* prtspexp,
-	 struct nf_conntrack_expect* exp)
+	 unsigned int matchoff, unsigned int matchlen, struct ip_ct_rtsp_expect* prtspexp, 
+	 struct nf_conntrack_expect* exp, struct nf_conntrack_expect* exp2)
 {
     char*   ptcp;
     uint    tcplen;
@@ -368,14 +372,14 @@
     uint    linelen;
     uint    off;
 
-    //struct iphdr* iph = (struct iphdr*)skb->nh.iph;
+    //struct iphdr* iph = (struct iphdr*)(*pskb)->nh.iph;
     //struct tcphdr* tcph = (struct tcphdr*)((void*)iph + iph->ihl*4);
 
     get_skb_tcpdata(skb, &ptcp, &tcplen);
     hdrsoff = matchoff;//exp->seq - ntohl(tcph->seq);
     hdrslen = matchlen;
     off = hdrsoff;
-    DEBUGP("NAT rtsp help_out\n");
+    pr_debug("NAT rtsp help_out\n");
 
     while (nf_mime_nextline(ptcp, hdrsoff+hdrslen, &off, &lineoff, &linelen))
     {
@@ -385,18 +389,18 @@
         }
         if (off > hdrsoff+hdrslen)
         {
-            INFOP("!! overrun !!");
+            pr_info("!! overrun !!");
             break;
         }
-        DEBUGP("hdr: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
+        pr_debug("hdr: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
 
         if (nf_strncasecmp(ptcp+lineoff, "Transport:", 10) == 0)
         {
             uint oldtcplen = tcplen;
-	    DEBUGP("hdr: Transport\n");
-            if (!rtsp_mangle_tran(ctinfo, exp, prtspexp, skb, lineoff, linelen))
+	    pr_debug("hdr: Transport\n");
+            if (!rtsp_mangle_tran(ctinfo, exp, exp2, prtspexp, skb, lineoff, linelen))
             {
-		DEBUGP("hdr: Transport mangle failed");
+		pr_debug("hdr: Transport mangle failed");
                 break;
             }
             get_skb_tcpdata(skb, &ptcp, &tcplen);
@@ -404,7 +408,7 @@
             off -= (oldtcplen-tcplen);
             lineoff -= (oldtcplen-tcplen);
             linelen -= (oldtcplen-tcplen);
-            DEBUGP("rep: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
+            pr_debug("rep: len=%u, %.*s", linelen, (int)linelen, ptcp+lineoff);
         }
     }
 
@@ -412,9 +416,9 @@
 }
 
 static unsigned int
-help(struct sk_buff *skb, enum ip_conntrack_info ctinfo,
+help(struct sk_buff *skb, enum ip_conntrack_info ctinfo, 
      unsigned int matchoff, unsigned int matchlen, struct ip_ct_rtsp_expect* prtspexp,
-     struct nf_conntrack_expect* exp)
+     struct nf_conntrack_expect* exp, struct nf_conntrack_expect* exp2)
 {
     int dir = CTINFO2DIR(ctinfo);
     int rc = NF_ACCEPT;
@@ -422,10 +426,10 @@
     switch (dir)
     {
     case IP_CT_DIR_ORIGINAL:
-        rc = help_out(skb, ctinfo, matchoff, matchlen, prtspexp, exp);
+        rc = help_out(skb, ctinfo, matchoff, matchlen, prtspexp, exp, exp2);
         break;
     case IP_CT_DIR_REPLY:
-	DEBUGP("unmangle ! %u\n", ctinfo);
+	pr_debug("unmangle ! %u\n", ctinfo);
     	/* XXX: unmangle */
 	rc = NF_ACCEPT;
         break;
@@ -448,11 +452,11 @@
     //code from 2.4 : newip = (HOOK2MANIP(hooknum) == IP_NAT_MANIP_SRC) ? newsrcip : newdstip;
     newip = newdstip;
 
-    DEBUGP("newsrcip=%u.%u.%u.%u, newdstip=%u.%u.%u.%u, newip=%u.%u.%u.%u\n",
+    pr_debug("newsrcip=%pI4, newdstip=%pI4, newip=%pI4\n",
            &newsrcip, &newdstip, &newip);
 
     mr.rangesize = 1;
-    // We don't want to manip the per-protocol, just the IPs.
+    // We don't want to manip the per-protocol, just the IPs. 
     mr.range[0].flags = IP_NAT_RANGE_MAP_IPS;
     mr.range[0].min_ip = mr.range[0].max_ip = newip;
 
--- old/include/linux/netfilter/nf_conntrack_rtsp.h	2011-07-20 18:19:20.000000000 +0800
+++ new/include/linux/netfilter/nf_conntrack_rtsp.h	2011-07-19 10:56:46.000000000 +0800
@@ -52,7 +52,7 @@
 				 enum ip_conntrack_info ctinfo,
 				 unsigned int matchoff, unsigned int matchlen,
 				 struct ip_ct_rtsp_expect *prtspexp,
-				 struct nf_conntrack_expect *exp);
+				 struct nf_conntrack_expect *exp, struct nf_conntrack_expect *exp2);
 
 extern void (*nf_nat_rtsp_hook_expectfn)(struct nf_conn *ct, struct nf_conntrack_expect *exp);
 