diff -Naur linux-2.6.36/arch/arm/common/gic.c linux-2.6.36-new/arch/arm/common/gic.c
--- linux-2.6.36/arch/arm/common/gic.c	2010-10-20 13:30:22.000000000 -0700
+++ linux-2.6.36-new/arch/arm/common/gic.c	2011-09-04 11:04:45.000000000 -0700
@@ -34,6 +34,7 @@
 #include <asm/hardware/gic.h>
 
 static DEFINE_SPINLOCK(irq_controller_lock);
+#define IRQ_BALANCE	1
 
 struct gic_chip_data {
 	unsigned int irq_offset;
@@ -108,54 +109,24 @@
 	spin_unlock(&irq_controller_lock);
 }
 
-static int gic_set_type(unsigned int irq, unsigned int type)
+#ifdef CONFIG_SMP
+ int gic_set_cpu(unsigned int irq, const struct cpumask *mask_val)
 {
-	void __iomem *base = gic_dist_base(irq);
-	unsigned int gicirq = gic_irq(irq);
-	u32 enablemask = 1 << (gicirq % 32);
-	u32 enableoff = (gicirq / 32) * 4;
-	u32 confmask = 0x2 << ((gicirq % 16) * 2);
-	u32 confoff = (gicirq / 16) * 4;
-	bool enabled = false;
+#ifdef IRQ_BALANCE
+	void __iomem *reg = gic_dist_base(irq) + GIC_DIST_TARGET + (gic_irq(irq) & ~3);
+	unsigned int shift = (irq % 4) * 8;
+	unsigned int cpu = cpumask_first(mask_val);
 	u32 val;
-
-	/* Interrupt configuration for SGIs can't be changed */
-	if (gicirq < 16)
-		return -EINVAL;
-
-	if (type != IRQ_TYPE_LEVEL_HIGH && type != IRQ_TYPE_EDGE_RISING)
-		return -EINVAL;
+	u32 *target_cpu = (u32)&mask_val[0];
 
 	spin_lock(&irq_controller_lock);
-
-	val = readl(base + GIC_DIST_CONFIG + confoff);
-	if (type == IRQ_TYPE_LEVEL_HIGH)
-		val &= ~confmask;
-	else if (type == IRQ_TYPE_EDGE_RISING)
-		val |= confmask;
-
-	/*
-	 * As recommended by the spec, disable the interrupt before changing
-	 * the configuration
-	 */
-	if (readl(base + GIC_DIST_ENABLE_SET + enableoff) & enablemask) {
-		writel(enablemask, base + GIC_DIST_ENABLE_CLEAR + enableoff);
-		enabled = true;
-	}
-
-	writel(val, base + GIC_DIST_CONFIG + confoff);
-
-	if (enabled)
-		writel(enablemask, base + GIC_DIST_ENABLE_SET + enableoff);
-
+	irq_desc[irq].node = cpu;
+	val = readl(reg) & ~(0xff << shift);
+	val |= *target_cpu << (shift);
+	writel(val, reg);
 	spin_unlock(&irq_controller_lock);
 
-	return 0;
-}
-
-#ifdef CONFIG_SMP
-static int gic_set_cpu(unsigned int irq, const struct cpumask *mask_val)
-{
+#else
 	void __iomem *reg = gic_dist_base(irq) + GIC_DIST_TARGET + (gic_irq(irq) & ~3);
 	unsigned int shift = (irq % 4) * 8;
 	unsigned int cpu = cpumask_first(mask_val);
@@ -168,6 +139,7 @@
 	writel(val, reg);
 	spin_unlock(&irq_controller_lock);
 
+#endif
 	return 0;
 }
 #endif
@@ -201,15 +173,47 @@
 	chip->unmask(irq);
 }
 
+#ifdef CONFIG_PM
+
+extern u64 gic_wakeups0;
+extern u64 gic_backups0;
+extern u16 gic_wakeups1;
+extern u16 gic_backups1;
+
+static int cs75xx_irq_set_wake(unsigned irq, unsigned on)
+{
+	if (unlikely(irq > 78))
+		return -EINVAL;
+
+	if (on){
+		if (irq >= 64 )
+			gic_wakeups1 |= (1 << (irq - 64));
+		else
+			gic_wakeups0 |= (u64) 1 << irq;
+	}
+	else{
+		if (irq >= 64 )
+			gic_wakeups1 &= ~(1 << (irq - 64));
+		else
+			gic_wakeups0 &= ~((u64) 1 << irq);
+	}
+	return 0;
+}
+#else
+#define cs75xx_irq_set_wake	NULL
+#endif
+
 static struct irq_chip gic_chip = {
 	.name		= "GIC",
 	.ack		= gic_ack_irq,
 	.mask		= gic_mask_irq,
 	.unmask		= gic_unmask_irq,
-	.set_type	= gic_set_type,
 #ifdef CONFIG_SMP
 	.set_affinity	= gic_set_cpu,
 #endif
+#ifdef CONFIG_PM
+	.set_wake	= cs75xx_irq_set_wake,
+#endif
 };
 
 void __init gic_cascade_irq(unsigned int gic_nr, unsigned int irq)
@@ -244,6 +248,8 @@
 	max_irq = readl(base + GIC_DIST_CTR) & 0x1f;
 	max_irq = (max_irq + 1) * 32;
 
+  printk("Max IRQs supported by GIC %d\n", max_irq);
+
 	/*
 	 * The GIC only supports up to 1020 interrupt sources.
 	 * Limit this to either the architected maximum, or the
