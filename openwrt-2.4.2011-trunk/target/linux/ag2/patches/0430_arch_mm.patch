diff -Naur linux-2.6.36/arch/arm/mm/Kconfig linux-2.6.36-new/arch/arm/mm/Kconfig
--- linux-2.6.36/arch/arm/mm/Kconfig	2011-09-04 09:47:11.000000000 -0700
+++ linux-2.6.36-new/arch/arm/mm/Kconfig	2011-09-04 11:06:47.000000000 -0700
@@ -807,7 +807,7 @@
 	depends on REALVIEW_EB_ARM11MP || MACH_REALVIEW_PB11MP || MACH_REALVIEW_PB1176 || \
 		   REALVIEW_EB_A9MP || ARCH_MX35 || ARCH_MX31 || MACH_REALVIEW_PBX || \
 		   ARCH_NOMADIK || ARCH_OMAP4 || ARCH_S5PV310 || ARCH_TEGRA || \
-		   ARCH_U8500 || ARCH_VEXPRESS_CA9X4
+		   ARCH_U8500 || ARCH_VEXPRESS_CA9X4 || ARCH_GOLDENGATE
 	default y
 	select OUTER_CACHE
 	select OUTER_CACHE_SYNC
diff -Naur linux-2.6.36/arch/arm/mm/cache-v7.S linux-2.6.36-new/arch/arm/mm/cache-v7.S
--- linux-2.6.36/arch/arm/mm/cache-v7.S	2010-10-20 13:30:22.000000000 -0700
+++ linux-2.6.36-new/arch/arm/mm/cache-v7.S	2011-09-04 11:06:47.000000000 -0700
@@ -76,6 +76,67 @@
 ENDPROC(v7_flush_dcache_all)
 
 /*
+ *  v7_invalidate_dcache_all()
+ *
+ *  Invalidate the whole D-cache.
+ *
+ *  Corrupted registers: r0-r7, r9-r11 (r6 only in Thumb mode)
+ *
+ *  - mm    - mm_struct describing address space
+ */
+ENTRY(v7_invalidate_dcache_all)
+  dmb         @ ensure ordering with previous memory accesses
+  mrc p15, 1, r0, c0, c0, 1   @ read clidr
+  ands  r3, r0, #0x7000000    @ extract loc from clidr
+  mov r3, r3, lsr #23     @ left align loc bit field
+  beq finished2     @ if loc is 0, then no need to clean
+  mov r10, #0       @ start clean at cache level 0
+loop11:
+  add r2, r10, r10, lsr #1    @ work out 3x current cache level
+  mov r1, r0, lsr r2      @ extract cache type bits from clidr
+  and r1, r1, #7      @ mask of the bits for current cache only
+  cmp r1, #2        @ see what cache we have at this level
+  blt skip2       @ skip if no cache, or just i-cache
+  mcr p15, 2, r10, c0, c0, 0    @ select current cache level in cssr
+  isb         @ isb to sych the new cssr&csidr
+  mrc p15, 1, r1, c0, c0, 0   @ read the new csidr
+  and r2, r1, #7      @ extract the length of the cache lines
+  add r2, r2, #4      @ add 4 (line length offset)
+  ldr r4, =0x3ff
+  ands  r4, r4, r1, lsr #3    @ find maximum number on the way size
+  clz r5, r4        @ find bit position of way size increment
+  ldr r7, =0x7fff
+  ands  r7, r7, r1, lsr #13   @ extract max number of the index size
+loop22:
+  mov r9, r4        @ create working copy of max way size
+loop33:
+ ARM( orr r11, r10, r9, lsl r5  ) @ factor way and cache number into r11
+ THUMB( lsl r6, r9, r5    )
+ THUMB( orr r11, r10, r6    ) @ factor way and cache number into r11
+ ARM( orr r11, r11, r7, lsl r2  ) @ factor index number into r11
+ THUMB( lsl r6, r7, r2    )
+ THUMB( orr r11, r11, r6    ) @ factor index number into r11
+  mcr p15, 0, r11, c7, c6, 2    @ invalidate by set/way
+  subs  r9, r9, #1      @ decrement the way
+  bge loop33
+  subs  r7, r7, #1      @ decrement the index
+  bge loop22
+skip2:
+  add r10, r10, #2      @ increment cache number
+  cmp r3, r10
+  bgt loop11
+finished2:
+  mov r10, #0       @ swith back to cache level 0
+  mcr p15, 2, r10, c0, c0, 0    @ select current cache level in cssr
+  dsb
+  isb
+  mov pc, lr
+ENDPROC(v7_invalidate_dcache_all)
+
+
+
+
+/*
  *	v7_flush_cache_all()
  *
  *	Flush the entire cache system.
diff -Naur linux-2.6.36/arch/arm/mm/init.c linux-2.6.36-new/arch/arm/mm/init.c
--- linux-2.6.36/arch/arm/mm/init.c	2010-10-20 13:30:22.000000000 -0700
+++ linux-2.6.36-new/arch/arm/mm/init.c	2011-09-04 11:06:47.000000000 -0700
@@ -153,7 +153,7 @@
 	unsigned int boot_pages;
 	phys_addr_t bitmap;
 	pg_data_t *pgdat;
-	int i;
+	int i, res;
 
 	/*
 	 * Allocate the bootmem bitmap page.  This must be in a region
@@ -188,6 +188,16 @@
 				memblock_size_bytes(&memblock.reserved, i),
 				BOOTMEM_DEFAULT);
 	}
+
+//#ifdef CONFIG_G2_IPC2RCPU
+	/* Reserve share memory for IPC */
+	res = reserve_bootmem_node(NODE_DATA(0),GOLDENGATE_IPC_BASE ,
+				GOLDENGATE_IPC_MEM_SIZE, BOOTMEM_EXCLUSIVE);
+	if(res!=0)
+		printk(KERN_ERR
+			"Overlap in-use of IPC memory region\n");
+//#endif
+
 }
 
 static void __init arm_bootmem_free(struct meminfo *mi, unsigned long min,
diff -Naur linux-2.6.36/arch/arm/mm/mmu.c linux-2.6.36-new/arch/arm/mm/mmu.c
--- linux-2.6.36/arch/arm/mm/mmu.c	2011-09-04 09:47:11.000000000 -0700
+++ linux-2.6.36-new/arch/arm/mm/mmu.c	2011-09-04 11:06:47.000000000 -0700
@@ -29,6 +29,8 @@
 
 #include <asm/mach/arch.h>
 #include <asm/mach/map.h>
+#include <mach/debug_print.h>
+#include <linux/bootmem.h>
 
 #include "mm.h"
 
@@ -911,12 +913,16 @@
 {
 	struct map_desc map;
 	unsigned long addr;
+  volatile int flag=1;
 
 	/*
 	 * Allocate the vector page early.
 	 */
+  /* Suresh - this is creating problem we will revert to old method and see
+  if it works*/
 	vectors_page = early_alloc(PAGE_SIZE);
 
+
 	for (addr = VMALLOC_END; addr; addr += PGDIR_SIZE)
 		pmd_clear(pmd_off_k(addr));
 
diff -Naur linux-2.6.36/arch/arm/mm/proc-v7.S linux-2.6.36-new/arch/arm/mm/proc-v7.S
--- linux-2.6.36/arch/arm/mm/proc-v7.S	2011-09-04 09:47:11.000000000 -0700
+++ linux-2.6.36-new/arch/arm/mm/proc-v7.S	2011-09-04 11:06:47.000000000 -0700
@@ -197,7 +197,24 @@
 	mcreq	p15, 0, r0, c1, c0, 1		@ TLB ops broadcasting
 #endif
 __v7_setup:
+#ifdef CONFIG_SMP
+  mrc p15, 0, r0, c1, c0, 1
+  tst r0, #(1 << 6)     @ SMP/nAMP mode enabled?
+  orreq r0, r0, #(1 << 6) | (1 << 0)  @ Enable SMP/nAMP mode and
+  mcreq p15, 0, r0, c1, c0, 1   @ TLB ops broadcasting
+#endif
 	adr	r12, __v7_setup_stack		@ the local stack
+#ifdef CONFIG_SMP
+  mrc p15, 0, r0, c0, c0, 0   @ read main ID register
+  ands  r0, r0, #0x03
+  beq skip_DC_invalid
+  stmia r12, {r0-r5, r7, r9, r11, lr}
+  bl  v7_invalidate_dcache_all
+  ldmia r12, {r0-r5, r7, r9, r11, lr}
+
+skip_DC_invalid:
+#endif
+
 	stmia	r12, {r0-r5, r7, r9, r11, lr}
 	bl	v7_flush_dcache_all
 	ldmia	r12, {r0-r5, r7, r9, r11, lr}
