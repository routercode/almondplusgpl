diff -Naur linux-2.6.36/init/main.c linux-2.6.36-new/init/main.c
--- linux-2.6.36/init/main.c	2010-10-20 13:30:22.000000000 -0700
+++ linux-2.6.36-new/init/main.c	2011-09-04 11:08:13.000000000 -0700
@@ -6,7 +6,7 @@
  *  GK 2/5/95  -  Changed to support mounting root fs via NFS
  *  Added initrd & change_root: Werner Almesberger & Hans Lermen, Feb '96
  *  Moan early if gcc is old, avoiding bogus kernels - Paul Gortmaker, May '96
- *  Simplified starting of init:  Michael A. Griffith <grif@acm.org> 
+ *  Simplified starting of init:  Michael A. Griffith <grif@acm.org>
  */
 
 #include <linux/types.h>
@@ -78,7 +78,13 @@
 #ifdef CONFIG_X86_LOCAL_APIC
 #include <asm/smp.h>
 #endif
-
+#ifdef CONFIG_ACP
+#include <linux/dma-mapping.h>
+#include <mach/registers.h>
+#include <mach/hardware.h>
+int verify_acp(void);
+extern unsigned int acp_enabled;
+#endif
 static int kernel_init(void *);
 
 extern void init_IRQ(void);
@@ -892,6 +898,10 @@
 
 	do_basic_setup();
 
+#ifdef CONFIG_ACP
+	verify_acp();
+#endif
+
 	/* Open the /dev/console on the rootfs, this should never fail */
 	if (sys_open((const char __user *) "/dev/console", O_RDWR, 0) < 0)
 		printk(KERN_WARNING "Warning: unable to open an initial console.\n");
@@ -920,3 +930,117 @@
 	init_post();
 	return 0;
 }
+
+#ifdef CONFIG_ACP
+/* This API was used to vefify if ACP work well.
+ * If data mismatch, disable ACP setting.
+ * In this test, we fill buffer content after cache coherence.
+ * This is intended to check if HW coherence well
+ *
+ */
+int verify_acp()
+{
+	int i, j, ret_v = -1;
+	unsigned int tmp;
+	dma_addr_t src_phy, dst_phy;
+#define BUFF_CNT_FOR_TEST	64
+#define BUFF_SIZE_FOR_TEST	8192
+	unsigned int *psrc_buf[BUFF_CNT_FOR_TEST];	/* 64 * 8K ==> 512KB */
+	unsigned int *pdst_buf[BUFF_CNT_FOR_TEST];
+
+	GLOBAL_ARM_CONFIG_D_t gbl_arm_cfg_d;
+	gbl_arm_cfg_d.wrd = readl(GLOBAL_ARM_CONFIG_D);
+	/* Enable ACP for peripheral DMA */
+	gbl_arm_cfg_d.bf.periph_user = 1;
+	gbl_arm_cfg_d.bf.periph_cache = 2;
+	writel(gbl_arm_cfg_d.wrd, GLOBAL_ARM_CONFIG_D);
+	acp_enabled = 0;
+
+	/* Enable DMA */
+	tmp = readl(IO_ADDRESS(DMA_DMA_LSO_RXDMA_CONTROL));
+	writel(tmp | 0x0D, IO_ADDRESS(DMA_DMA_LSO_RXDMA_CONTROL));
+	tmp = readl(IO_ADDRESS(DMA_DMA_LSO_TXDMA_CONTROL));
+	writel(tmp | 0x0D, IO_ADDRESS(DMA_DMA_LSO_TXDMA_CONTROL));
+
+	/* Init all pointer to NULL */
+	for (i = 0; i < BUFF_CNT_FOR_TEST; i++) {
+		psrc_buf[i] = NULL;
+		pdst_buf[i] = NULL;
+	}
+
+	/* Fill source and trig DMA */
+	for (i = 0; i < BUFF_CNT_FOR_TEST; i++) {
+		psrc_buf[i] = kmalloc(BUFF_SIZE_FOR_TEST, GFP_KERNEL);
+		pdst_buf[i] = kmalloc(BUFF_SIZE_FOR_TEST, GFP_KERNEL);
+		if ((psrc_buf[i] == NULL) || (pdst_buf[i] == NULL)) {
+			printk("Allocate buff fail for ACP test!!\n");
+			printk("Disable ACP\n");
+			ret_v = -1;
+			goto out;
+		}
+
+		/* fill content after and flush to DDR */
+		for (j = 0; j < BUFF_SIZE_FOR_TEST / sizeof(int); j++)
+			psrc_buf[i][j] = 0x5af05000|j;
+
+		src_phy = dma_map_single(NULL, psrc_buf[i], BUFF_SIZE_FOR_TEST,
+					 DMA_TO_DEVICE);
+
+		dst_phy = dma_map_single(NULL, pdst_buf[i], BUFF_SIZE_FOR_TEST,
+					 DMA_FROM_DEVICE);
+
+		/* Out of range testing */
+//		src_phy += 0x20000000;	// 512MB
+//		dst_phy += 0x20000000;
+		
+		/* fill content after dma_map() intend for ACP verification */
+		for (j = 0; j < BUFF_SIZE_FOR_TEST / sizeof(int); j++)
+			psrc_buf[i][j] = (i << 16) | j;
+
+		/* Enable BMC0 */
+		writel(src_phy, IO_ADDRESS(DMA_DMA_LSO_BMC0_SOURCE_ADDR));
+		writel(dst_phy, IO_ADDRESS(DMA_DMA_LSO_BMC0_DESTINATION_ADDR));
+		writel(BUFF_SIZE_FOR_TEST,
+		       IO_ADDRESS(DMA_DMA_LSO_BMC0_COPY_BYTE));
+		readl(IO_ADDRESS(DMA_DMA_LSO_BMC0_COPY_BYTE));
+		writel(1, IO_ADDRESS(DMA_DMA_LSO_BMC0_START));
+		/* Wait finish bit */
+		while (readl(IO_ADDRESS(DMA_DMA_LSO_BMC0_INTERRUPT)) == 0) ;
+
+		/* Clear INT */
+		writel(1, IO_ADDRESS(DMA_DMA_LSO_BMC0_INTERRUPT));
+		writel(0, IO_ADDRESS(DMA_DMA_LSO_BMC0_START));
+
+		/* Compare source & destination */
+		ret_v = memcmp(psrc_buf[i], pdst_buf[i], BUFF_SIZE_FOR_TEST);
+		if (ret_v != 0)
+			printk("ACP[%d] test fail!!!\n", i);
+		else
+			printk("ACP[%d] test OK\n", i);
+	}
+
+ out:
+	/* Stop BMC and INT */
+	writel(0, IO_ADDRESS(DMA_DMA_LSO_BMC0_START));
+	writel(0, IO_ADDRESS(DMA_DMA_LSO_BMC0_INTENABLE));
+
+	/* Free allocated buffer */
+	for (i = 0; i < BUFF_CNT_FOR_TEST; i++) {
+		if (psrc_buf[i] != NULL)
+			kfree(psrc_buf[i]);
+		if (pdst_buf[i] != NULL)
+			kfree(pdst_buf[i]);
+	}
+
+	if (ret_v != 0) {		/* Disable ACP if test fail */
+		writel(0, IO_ADDRESS(GLOBAL_ARM_CONFIG_D));
+		acp_enabled = 0;
+	} else {
+		acp_enabled = 1;
+	}
+
+	printk("ACP %sabled\n", ret_v == 0 ? "En" : "Dis");
+
+	return ret_v;
+}
+#endif
